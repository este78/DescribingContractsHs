

--From Obsevables, sorting dates? not working
sortDate :: Ord Date =>[Date] -> [Date]
sortDate [] = []
sortDate (Day [x]) = Day $ x : []
sortDate (Day(x:xs)) =  sort $ Day (x:xs)

--
type Date = (CalendarTime, TimeStep)
type TimeStep = Int
type CalendarTime = ()

mkDate :: TimeStep -> Date
mkDate s = ((),s)

time0 :: Date
time0 = mkDate 0

-------
module StringToDate where

import Data.Time.Clock
import Data.Time.Calendar

date :: IO (Integer,Int,Int) -- :: (year,month,day)
date = getCurrentTime >>= return . toGregorian . utctDay


data Date =  Day Int deriving (Show, Eq, Ord, Read)   -- C (Integer,Int,Int) |

--comparing dates, Use of IO
atDate (Day a) (Day b)
     | a == b = True 
     | otherwise = False

atDateMixedIO (Day a) b
     | a <= b = True 
     | otherwise = False

atDateIO (a,b,c)(x,y,z)
     |(a,b,c) == (x,y,z) = True 
     | otherwise = False


dateIO :: Date -> IO Bool
dateIO a = do
  (x,y,z) <- date
  b <- getDayIO(x,y,z)
  return (atDateMixedIO a b)
  


===============================================================================
Experiment with IO date. ave to use monads
===============================================================================  
--Converts a Calendar date in the form year,month,day into a integer
getDay :: a-> Date 
getDay (y,m,d) = let m' = processMonth (y,m,d) ;y' = processYear (y,m,d) 
                       in Day(processDay y' m' d)  

processMonth :: a -> Int
processMonth (_,m,_) = ((m+9)`mod` 12)
processYear :: a -> Integer
processYear (y,m,d) = y - ((toInteger(processMonth(y,m,d))) `div` 10)

processDay :: Integer -> Int -> Int -> Int
processDay y m d = let y' = fromInteger y 
       in 365*y' + y' `div` 4 - y' `div` 100 + y' `div` 400 + ((m*306 + 5) `div` 10) + (d -1)

--difference Days
diffDays :: Date -> Date -> Int
diffDays (Day a)(Day b) = a - b

--gets a date from a day number
convertToDate :: Date  -> a
convertToDate (Day g) = let y = convertToYear (Day g) ; d = convertToDays (Day g) y ; m = convertToMonth d ;  
                        in (dYear y m, dMonth m, dDay d m)
                      

--Day to Date Inner Workings
--Intermediate Step to calculate the date
convertToYear :: Date -> Integer
convertToYear (Day g) = toInteger((10000*g + 14780) `div` 3652425)

convertToDays :: Date -> Integer -> Int
convertToDays (Day g) y = let y' = fromInteger y in  g - (365*y' + y' `div` 4 - y' `div` 100 + y' `div` 400)

convertToMonth :: Int -> Int
convertToMonth d = (100*d + 52) `div` 3060

--Final Step to Calculate de Date
dYear :: Integer -> Int -> Integer
dYear y m = let m' = toInteger ((m + 2) `div` 12) in y + m'

dDay d m = d - ((m*306 + 5) `div` 10) + 1 

dMonth :: Int -> Int
dMonth m = ((m + 2) `mod` 12) + 1



--algorithm from https://alcor.concordia.ca/~gpkatch/gdate-algorithm.html
-- function d(g)
-- y = (10000*g + 14780)/3652425
-- ddd = g - (365*y + y/4 - y/100 + y/400)
-- if (ddd < 0) then
 -- y = y - 1
 -- ddd = g - (365*y + y/4 - y/100 + y/400)
 -- endif
-- mi = (100*ddd + 52)/3060
-- mm = (mi + 2)%12 + 1
-- y = y + (mi + 2)/12
-- dd = ddd - (mi*306 + 5)/10 + 1
-- return y, mm, dd
===================================================================================